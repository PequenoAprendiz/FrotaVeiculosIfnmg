/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.ifnmg.wellington.apresentacao;

import br.edu.ifnmg.wellington.entidade.Corrida;
import br.edu.ifnmg.wellington.entidade.Habilitacao;
import br.edu.ifnmg.wellington.entidade.Motorista;
import br.edu.ifnmg.wellington.entidade.Relatorio;
import br.edu.ifnmg.wellington.entidade.Usuario;
import br.edu.ifnmg.wellington.entidade.Veiculo;
import br.edu.ifnmg.wellington.exception.CampoObrigatorioException;
import br.edu.ifnmg.wellington.exception.FrotaVeiculosException;
import br.edu.ifnmg.wellington.exception.LoginEsenhaInvalidoException;
import br.edu.ifnmg.wellington.exception.VerificarVeiculoDuplicado;
import br.edu.ifnmg.wellington.negocio.CorridaBO;
import br.edu.ifnmg.wellington.negocio.HabilitacaoBO;
import br.edu.ifnmg.wellington.negocio.MotoristaBO;
import br.edu.ifnmg.wellington.negocio.MotoristaFazCorridaBO;
import br.edu.ifnmg.wellington.negocio.RelatorioBO;
import br.edu.ifnmg.wellington.negocio.UsuarioBO;
import br.edu.ifnmg.wellington.negocio.VeiculoBO;
import java.awt.Color;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Were
 */
public final class Home extends javax.swing.JFrame {

    private Usuario usuarioEmEdicao;
    private Veiculo veiculoEmEdicao;
    private FormAddVeiculo telaAddveiculo;
    private FormAddMotorista telaAddMotorista;
    private FormAddUsuario telaAddUsuario;
    private FormAddCorrida telaAddCorrida;
    int estadoTela = 0;
    private List<Usuario> usuarios;
    private List<Veiculo> veiculos;
    private List<Motorista> motoristas;
    private List<Corrida> corridas;
    private UsuarioBO usuarioBO;
    private MotoristaBO motoristaBO;

    public Home() throws SQLException {
        this.usuarioEmEdicao = new Usuario();
        // this.verificaEtadoTela();
        initComponents();
        this.carregarTabelaDeCorridas();
        this.carregarTabelaDeVeiculos();
        this.carregarTabelaDeMotorista();
        this.carregarTabelaDeUsuarios();
        this.desabilitarComponentesAdm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTela = new javax.swing.JPanel();
        tabpMenu = new javax.swing.JTabbedPane();
        pnlCorridas = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaCorridas = new javax.swing.JTable();
        btnNovaCorrida = new javax.swing.JButton();
        btnAtualizarCorrida = new javax.swing.JButton();
        btnExcluirCorrida = new javax.swing.JButton();
        pnlVeiculos = new javax.swing.JPanel();
        pnlTabelaVeiculos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaVeiculos = new javax.swing.JTable();
        btnAddVeiculo = new javax.swing.JButton();
        btnEditarVeiculo = new javax.swing.JButton();
        btnExcluirVeiculo = new javax.swing.JButton();
        pnlMotoristas = new javax.swing.JPanel();
        pnlTabelaMotoristas = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaMotoristas = new javax.swing.JTable();
        btnAddMotorista = new javax.swing.JButton();
        btnEditarMotorista = new javax.swing.JButton();
        btnExcluirMotorista = new javax.swing.JButton();
        pnlAddUser = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaUsuario = new javax.swing.JTable();
        btnAddNovoUsuario = new javax.swing.JButton();
        btnEditarUsuario = new javax.swing.JButton();
        btnExcluirUsuario = new javax.swing.JButton();
        pnlRelatorios = new javax.swing.JPanel();
        btnRelatorioTotalCorridas = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnRelatorioVeiculo = new javax.swing.JButton();
        pnlLogin = new javax.swing.JPanel();
        lblLogin = new javax.swing.JLabel();
        lblSenha = new javax.swing.JLabel();
        lblinfo3 = new javax.swing.JLabel();
        txtSenha = new javax.swing.JPasswordField();
        btnAcesso = new javax.swing.JButton();
        txtLogin = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gerenciador de Veículos Frota IFNMG");
        setExtendedState(6);

        pnlTela.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Frota Veículos Ifnmg", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24))); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Corrida", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tabelaCorridas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tabelaCorridas);

        btnNovaCorrida.setText("Nova corrida");
        btnNovaCorrida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaCorridaActionPerformed(evt);
            }
        });

        btnAtualizarCorrida.setText("Editar");
        btnAtualizarCorrida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarCorridaActionPerformed(evt);
            }
        });

        btnExcluirCorrida.setText("Excluir");
        btnExcluirCorrida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirCorridaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnNovaCorrida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAtualizarCorrida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluirCorrida)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNovaCorrida)
                    .addComponent(btnAtualizarCorrida)
                    .addComponent(btnExcluirCorrida)))
        );

        javax.swing.GroupLayout pnlCorridasLayout = new javax.swing.GroupLayout(pnlCorridas);
        pnlCorridas.setLayout(pnlCorridasLayout);
        pnlCorridasLayout.setHorizontalGroup(
            pnlCorridasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCorridasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlCorridasLayout.setVerticalGroup(
            pnlCorridasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCorridasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpMenu.addTab("Corridas", pnlCorridas);

        pnlTabelaVeiculos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Visualizar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tabelaVeiculos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelaVeiculos);

        btnAddVeiculo.setText("Adicionar");
        btnAddVeiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVeiculoActionPerformed(evt);
            }
        });

        btnEditarVeiculo.setText("Editar");
        btnEditarVeiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarVeiculoActionPerformed(evt);
            }
        });

        btnExcluirVeiculo.setText("Excluir");
        btnExcluirVeiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirVeiculoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTabelaVeiculosLayout = new javax.swing.GroupLayout(pnlTabelaVeiculos);
        pnlTabelaVeiculos.setLayout(pnlTabelaVeiculosLayout);
        pnlTabelaVeiculosLayout.setHorizontalGroup(
            pnlTabelaVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTabelaVeiculosLayout.createSequentialGroup()
                .addGroup(pnlTabelaVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTabelaVeiculosLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnExcluirVeiculo))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlTabelaVeiculosLayout.setVerticalGroup(
            pnlTabelaVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTabelaVeiculosLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlTabelaVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditarVeiculo)
                    .addComponent(btnAddVeiculo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExcluirVeiculo))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlVeiculosLayout = new javax.swing.GroupLayout(pnlVeiculos);
        pnlVeiculos.setLayout(pnlVeiculosLayout);
        pnlVeiculosLayout.setHorizontalGroup(
            pnlVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVeiculosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTabelaVeiculos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlVeiculosLayout.setVerticalGroup(
            pnlVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVeiculosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTabelaVeiculos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpMenu.addTab("Veículos", pnlVeiculos);

        pnlTabelaMotoristas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Visualizar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tabelaMotoristas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabelaMotoristas);

        btnAddMotorista.setText("Adicionar");
        btnAddMotorista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMotoristaActionPerformed(evt);
            }
        });

        btnEditarMotorista.setText("Editar");
        btnEditarMotorista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarMotoristaActionPerformed(evt);
            }
        });

        btnExcluirMotorista.setText("Excluir");
        btnExcluirMotorista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirMotoristaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTabelaMotoristasLayout = new javax.swing.GroupLayout(pnlTabelaMotoristas);
        pnlTabelaMotoristas.setLayout(pnlTabelaMotoristasLayout);
        pnlTabelaMotoristasLayout.setHorizontalGroup(
            pnlTabelaMotoristasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTabelaMotoristasLayout.createSequentialGroup()
                .addGroup(pnlTabelaMotoristasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTabelaMotoristasLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnExcluirMotorista))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlTabelaMotoristasLayout.setVerticalGroup(
            pnlTabelaMotoristasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTabelaMotoristasLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlTabelaMotoristasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditarMotorista)
                    .addComponent(btnAddMotorista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExcluirMotorista))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlMotoristasLayout = new javax.swing.GroupLayout(pnlMotoristas);
        pnlMotoristas.setLayout(pnlMotoristasLayout);
        pnlMotoristasLayout.setHorizontalGroup(
            pnlMotoristasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMotoristasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTabelaMotoristas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlMotoristasLayout.setVerticalGroup(
            pnlMotoristasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMotoristasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTabelaMotoristas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpMenu.addTab("Motoristas", pnlMotoristas);

        pnlAddUser.setEnabled(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Visualizar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tabelaUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tabelaUsuario);

        btnAddNovoUsuario.setText("Adicionar");
        btnAddNovoUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNovoUsuarioActionPerformed(evt);
            }
        });

        btnEditarUsuario.setText("Editar");
        btnEditarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarUsuarioActionPerformed(evt);
            }
        });

        btnExcluirUsuario.setText("Excluir");
        btnExcluirUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddNovoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnExcluirUsuario))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditarUsuario)
                    .addComponent(btnAddNovoUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExcluirUsuario))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlAddUserLayout = new javax.swing.GroupLayout(pnlAddUser);
        pnlAddUser.setLayout(pnlAddUserLayout);
        pnlAddUserLayout.setHorizontalGroup(
            pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddUserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlAddUserLayout.setVerticalGroup(
            pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddUserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpMenu.addTab("Uusuários", pnlAddUser);

        btnRelatorioTotalCorridas.setText("Gerar!");
        btnRelatorioTotalCorridas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioTotalCorridasActionPerformed(evt);
            }
        });

        jLabel1.setText("Total de corridas por Motorista:");

        jLabel2.setText("Total de corridas por veículo e total de quilomentragem");

        btnRelatorioVeiculo.setText("Gerar!");
        btnRelatorioVeiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioVeiculoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlRelatoriosLayout = new javax.swing.GroupLayout(pnlRelatorios);
        pnlRelatorios.setLayout(pnlRelatoriosLayout);
        pnlRelatoriosLayout.setHorizontalGroup(
            pnlRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRelatoriosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(pnlRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnRelatorioVeiculo)
                    .addComponent(btnRelatorioTotalCorridas))
                .addContainerGap(377, Short.MAX_VALUE))
        );
        pnlRelatoriosLayout.setVerticalGroup(
            pnlRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRelatoriosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRelatorioTotalCorridas)
                    .addGroup(pnlRelatoriosLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btnRelatorioVeiculo))
                .addContainerGap(270, Short.MAX_VALUE))
        );

        tabpMenu.addTab("Relatórios", pnlRelatorios);

        javax.swing.GroupLayout pnlTelaLayout = new javax.swing.GroupLayout(pnlTela);
        pnlTela.setLayout(pnlTelaLayout);
        pnlTelaLayout.setHorizontalGroup(
            pnlTelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTelaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabpMenu)
                .addContainerGap())
        );
        pnlTelaLayout.setVerticalGroup(
            pnlTelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTelaLayout.createSequentialGroup()
                .addComponent(tabpMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlLogin.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Administrativo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24))); // NOI18N

        lblLogin.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblLogin.setText("Login:");

        lblSenha.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblSenha.setText("Senha:");

        btnAcesso.setText("Acesso");
        btnAcesso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcessoActionPerformed(evt);
            }
        });
        btnAcesso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAcessoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout pnlLoginLayout = new javax.swing.GroupLayout(pnlLogin);
        pnlLogin.setLayout(pnlLoginLayout);
        pnlLoginLayout.setHorizontalGroup(
            pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAcesso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtSenha, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlLoginLayout.createSequentialGroup()
                        .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtLogin)
                            .addComponent(lblLogin, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSenha, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblinfo3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
        pnlLoginLayout.setVerticalGroup(
            pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSenha)
                .addGap(18, 18, 18)
                .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82)
                .addComponent(lblinfo3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAcesso, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlTela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcessoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcessoActionPerformed
        try {
            this.login();
            //this.btnAcesso.setFocusable(false);
        } catch (LoginEsenhaInvalidoException l) {
            String mensagem = "Erro ao tentar entrar no sistema:\n" + l.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Login", JOptionPane.ERROR_MESSAGE);
        } catch (CampoObrigatorioException c) {
            String mensagem = "Erro ao tentar entrar no sistema:\n" + c.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Login", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, c);
        } catch (SQLException | NoSuchAlgorithmException | UnsupportedEncodingException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnAcessoActionPerformed

    private void btnAddVeiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVeiculoActionPerformed
        if (this.telaAddveiculo == null) {
            try {
                this.telaAddveiculo = new FormAddVeiculo(this);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.telaAddveiculo.setVisible(true);
        this.telaAddveiculo.toFront();
    }//GEN-LAST:event_btnAddVeiculoActionPerformed

    private void btnEditarVeiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarVeiculoActionPerformed
        int linhaSelecionada = tabelaVeiculos.getSelectedRow();
        if (linhaSelecionada != -1) {
            Veiculo veiculoSelecionado = this.veiculos.get(linhaSelecionada);
            if (this.telaAddveiculo == null || this.telaAddveiculo != null) {
                try {
                    this.telaAddveiculo = new FormAddVeiculo(veiculoSelecionado, this, 1);
                } catch (SQLException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.telaAddveiculo.setVisible(true);
            this.telaAddveiculo.toFront();
        } else {
            String mensagem = "Selencione um veículo antes!";
            JOptionPane.showMessageDialog(this, mensagem, "Edição de Veículo", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_btnEditarVeiculoActionPerformed

    private void btnExcluirVeiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirVeiculoActionPerformed
        int linhaSelecionada = tabelaVeiculos.getSelectedRow();
        if (linhaSelecionada != -1) {
            int i = JOptionPane.showConfirmDialog(this, "Tem Certeza?", "Edição de veículo", JOptionPane.YES_NO_OPTION);
            if (i != JOptionPane.NO_OPTION) {
                Veiculo veiculoSelecionado = veiculos.get(linhaSelecionada);
                this.deletarVeiculo(veiculoSelecionado);
            }
        } else {
            String mensagem = "Selencione um veículo antes!";
            JOptionPane.showMessageDialog(this, mensagem, "Edição de Veículo", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirVeiculoActionPerformed

    private void btnAddMotoristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMotoristaActionPerformed
        if (this.telaAddMotorista == null) {
            try {
                this.telaAddMotorista = new FormAddMotorista(this);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.telaAddMotorista.setVisible(true);
        this.telaAddMotorista.toFront();
    }//GEN-LAST:event_btnAddMotoristaActionPerformed

    private void btnEditarMotoristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarMotoristaActionPerformed
        int linhaSelecionada = tabelaMotoristas.getSelectedRow();
        if (linhaSelecionada != -1) {
            Motorista motoristaSelecionado = this.motoristas.get(linhaSelecionada);
            if (this.telaAddMotorista == null || this.telaAddMotorista != null) {
                try {
                    this.telaAddMotorista = new FormAddMotorista(motoristaSelecionado, this, 1);
                } catch (SQLException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.telaAddMotorista.setVisible(true);
            this.telaAddMotorista.toFront();
        } else {
            String mensagem = "Selencione um motorista antes!";
            JOptionPane.showMessageDialog(this, mensagem, "Edição de Motorista", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnEditarMotoristaActionPerformed

    private void btnExcluirMotoristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirMotoristaActionPerformed
        int linhaSelecionada = tabelaMotoristas.getSelectedRow();
        if (linhaSelecionada != -1) {

            int i = JOptionPane.showConfirmDialog(this, "Tem Certeza?", "Excluir  veículo", JOptionPane.YES_NO_OPTION);
            if (i == JOptionPane.NO_OPTION) {
                this.dispose();
            } else {
                Motorista motoristaSelecionado = this.motoristas.get(linhaSelecionada);
                this.deletarMotorista(motoristaSelecionado);
            }
        } else {
            String mensagem = "Selencione um motorista antes!";
            JOptionPane.showMessageDialog(this, mensagem, "Excluir  veículo", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirMotoristaActionPerformed

    private void btnAcessoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAcessoKeyPressed
        try {
            this.login();
            this.btnAcesso.setFocusable(false);
        } catch (LoginEsenhaInvalidoException l) {
            String mensagem = "Erro ao tentar entrar no sistema:\n" + l.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Login", JOptionPane.ERROR_MESSAGE);
        } catch (CampoObrigatorioException c) {
            String mensagem = "Erro ao tentar entrar no sistema:\n" + c.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Login", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException | NoSuchAlgorithmException | UnsupportedEncodingException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAcessoKeyPressed

    private void btnAddNovoUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNovoUsuarioActionPerformed
        if (this.telaAddUsuario == null) {
            this.telaAddUsuario = new FormAddUsuario(this);
        }
        this.telaAddUsuario.setVisible(true);
        this.telaAddUsuario.toFront();
    }//GEN-LAST:event_btnAddNovoUsuarioActionPerformed

    private void btnEditarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarUsuarioActionPerformed
        int linhaSelecionada = tabelaUsuario.getSelectedRow();
        if (linhaSelecionada != -1) {
            Usuario usuarioSelecionado = this.usuarios.get(linhaSelecionada);
            if (this.telaAddUsuario == null || this.telaAddUsuario != null) {
                this.telaAddUsuario = new FormAddUsuario(usuarioSelecionado, this, 1);
            }
            this.telaAddUsuario.setVisible(true);
            this.telaAddUsuario.toFront();
        } else {
            String mensagem = "Selencione um usuario antes!";
            JOptionPane.showMessageDialog(this, mensagem, "Edição de usuario", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnEditarUsuarioActionPerformed

    private void btnExcluirUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirUsuarioActionPerformed
        int linhaSelecionada = tabelaUsuario.getSelectedRow();
        if (linhaSelecionada != -1) {
            int i = JOptionPane.showConfirmDialog(this, "Tem Certeza?", "Excluir  usuráio", JOptionPane.YES_NO_OPTION);
            if (i != JOptionPane.NO_OPTION) {
                Usuario usuarioSelecionado = this.usuarios.get(linhaSelecionada);
                this.deletarUsuario(usuarioSelecionado);
            }
        } else {
            String mensagem = "Selencione um motorista antes!";
            JOptionPane.showMessageDialog(this, mensagem, "Excluir  usuráio", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirUsuarioActionPerformed

    private void btnNovaCorridaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaCorridaActionPerformed
        if (this.telaAddCorrida == null) {
            try {
                this.telaAddCorrida = new FormAddCorrida(this);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.telaAddCorrida.setVisible(true);
        this.telaAddCorrida.toFront();

    }//GEN-LAST:event_btnNovaCorridaActionPerformed

    private void btnAtualizarCorridaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarCorridaActionPerformed
        int linhaSelecionada = tabelaCorridas.getSelectedRow();
        if (linhaSelecionada != -1) {
            Corrida corridaSelecionada = this.corridas.get(linhaSelecionada);
            if (this.telaAddCorrida == null || this.telaAddCorrida != null) {
                try {
                    this.telaAddCorrida = new FormAddCorrida(corridaSelecionada, this, 1);
                } catch (SQLException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.telaAddCorrida.setVisible(true);
            this.telaAddCorrida.toFront();
        } else {
            String mensagem = "Selencione um Corrida antes!";
            JOptionPane.showMessageDialog(this, mensagem, "Atualizar corrida", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnAtualizarCorridaActionPerformed

    private void btnExcluirCorridaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirCorridaActionPerformed
        int linhaSelecionada = tabelaCorridas.getSelectedRow();
        if (linhaSelecionada != -1) {
            int i = JOptionPane.showConfirmDialog(this, "Tem Certeza?", "Edição de corrida", JOptionPane.YES_NO_OPTION);
            if (i != JOptionPane.NO_OPTION) {
                Corrida corridaSelecionado = corridas.get(linhaSelecionada);
                try {
                    this.deletarCorrida(corridaSelecionado);

                    this.carregarTabelaDeCorridas();
                } catch (SQLException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            String mensagem = "Selencione uma corrida antes!";
            JOptionPane.showMessageDialog(this, mensagem, "Edição de corrida", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirCorridaActionPerformed

    private void btnRelatorioTotalCorridasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioTotalCorridasActionPerformed
        try {
            this.gerarRelatorioTotalDeCorridasPorMotoristas();
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JRException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRelatorioTotalCorridasActionPerformed

    private void btnRelatorioVeiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioVeiculoActionPerformed

        try {
            this.gerarRelatorioTotalDeCorridasVeiculos();
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnRelatorioVeiculoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Home().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcesso;
    private javax.swing.JButton btnAddMotorista;
    private javax.swing.JButton btnAddNovoUsuario;
    private javax.swing.JButton btnAddVeiculo;
    private javax.swing.JButton btnAtualizarCorrida;
    private javax.swing.JButton btnEditarMotorista;
    private javax.swing.JButton btnEditarUsuario;
    private javax.swing.JButton btnEditarVeiculo;
    private javax.swing.JButton btnExcluirCorrida;
    private javax.swing.JButton btnExcluirMotorista;
    private javax.swing.JButton btnExcluirUsuario;
    private javax.swing.JButton btnExcluirVeiculo;
    private javax.swing.JButton btnNovaCorrida;
    private javax.swing.JButton btnRelatorioTotalCorridas;
    private javax.swing.JButton btnRelatorioVeiculo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblLogin;
    private javax.swing.JLabel lblSenha;
    private javax.swing.JLabel lblinfo3;
    private javax.swing.JPanel pnlAddUser;
    private javax.swing.JPanel pnlCorridas;
    private javax.swing.JPanel pnlLogin;
    private javax.swing.JPanel pnlMotoristas;
    private javax.swing.JPanel pnlRelatorios;
    private javax.swing.JPanel pnlTabelaMotoristas;
    private javax.swing.JPanel pnlTabelaVeiculos;
    private javax.swing.JPanel pnlTela;
    private javax.swing.JPanel pnlVeiculos;
    private javax.swing.JTable tabelaCorridas;
    private javax.swing.JTable tabelaMotoristas;
    private javax.swing.JTable tabelaUsuario;
    private javax.swing.JTable tabelaVeiculos;
    private javax.swing.JTabbedPane tabpMenu;
    private javax.swing.JTextField txtLogin;
    private javax.swing.JPasswordField txtSenha;
    // End of variables declaration//GEN-END:variables

    private void login() throws LoginEsenhaInvalidoException, SQLException, NoSuchAlgorithmException, UnsupportedEncodingException {
        if (estadoTela == 1) { // processo de Logoff de usuario
            JOptionPane.showMessageDialog(this, "Agora você não tem mais acesso total ao sistema!", "LogOff - Sair!", JOptionPane.INFORMATION_MESSAGE);
            estadoTela = 0;
            this.abilitaCamposLogin();
            this.limparCamposLogin();
            this.desabilitarComponentesAdm();
            this.btnAddVeiculo.setEnabled(false);
        } else if (estadoTela == 0) {
            // try {
            this.usuarioBO = new UsuarioBO();
            this.recuperarCampos();
            String senhaMd5 = usuarioBO.exemploMD5(this.usuarioEmEdicao.getSenha());
            this.usuarios = this.usuarioBO.buscarUsuarios();
            for (Usuario u : usuarios) {
                if (u.getLogin().equals(this.usuarioEmEdicao.getLogin()) && u.getSenha().equals(senhaMd5) && u.getTipo() == 1) {
                    this.estadoTela = 1; // tela com usuario logado
                    this.limparCamposLogin();
                    this.desabilitaCampos(u);
                    this.habilitarComponentesAdm(u);
                    JOptionPane.showMessageDialog(this, "Usuario logado, acesso total liberado!", "Login - Entrar!", JOptionPane.INFORMATION_MESSAGE);
                    this.btnAcesso.setText("Sair");
                    break;
                } else if (u.getLogin().equals(this.usuarioEmEdicao.getLogin()) && u.getSenha().equals(senhaMd5) && u.getTipo() == 0) {
                    this.estadoTela = 1; // tela com usuario logado
                    this.limparCamposLogin();
                    this.desabilitaCampos(u);
                    JOptionPane.showMessageDialog(this, "Usuario logado, acesso permissões de acesso à usuario do tipo Atendente!", "Login - Entrar!", JOptionPane.INFORMATION_MESSAGE);
                    this.btnAcesso.setText("Sair");
                    break;
                }               
            }
        }
    }

    private void recuperarCampos() throws SQLException {
        if (txtLogin.getText().equals("")) {
            throw new CampoObrigatorioException("Campo LOGIN vazio!");
        } else {
            this.usuarioEmEdicao.setLogin(txtLogin.getText());
        }

        if (txtSenha.getText().equals("")) {
            throw new CampoObrigatorioException("Campo SENHA vazio!");
        } else {
            this.usuarioEmEdicao.setSenha(txtSenha.getText());
        }
    }

    private void desabilitaCampos(Usuario u) {
        this.lblLogin.setEnabled(false);
        this.lblSenha.setEnabled(false);
        this.txtLogin.setEnabled(false);
        this.txtSenha.setEnabled(false);
        this.usuarioAtual(u);

    }

    private void usuarioAtual(Usuario u) {
        if (u.getTipo() == 1) {
            this.lblinfo3.setText("ADMINISTRADOR");
            this.lblinfo3.setForeground(Color.green);
        } else {
            this.lblinfo3.setText("ATENDENTE");
            this.lblinfo3.setForeground(Color.blue);
        }
    }

    private void abilitaCamposLogin() {
        this.btnAcesso.setText("Acesso");
        this.txtLogin.setEnabled(true);
        this.txtSenha.setEnabled(true);
        this.lblLogin.setEnabled(true);
        this.lblSenha.setEnabled(true);
        this.lblinfo3.setText("");
    }

    private void limparCamposLogin() {
        this.txtLogin.setText("");
        this.txtSenha.setText("");
    }

    private void verificaEtadoTela() {
        if (estadoTela == 1) {
            //this.habilitarComponentesAdm();
        }
    }

    private void habilitarComponentesAdm(Usuario u) {
        if (estadoTela == 1 && u.getTipo() == 1) {
            this.tabpMenu.setEnabledAt(3, true);
            this.btnAddVeiculo.setEnabled(true);
            this.btnExcluirVeiculo.setEnabled(true);
            this.btnEditarVeiculo.setEnabled(true);
            this.btnAddMotorista.setEnabled(true);
            this.btnEditarMotorista.setEnabled(true);
            this.btnExcluirMotorista.setEnabled(true);
            this.btnAddNovoUsuario.setEnabled(true);
            this.btnEditarUsuario.setEnabled(true);
            this.btnExcluirUsuario.setEnabled(true);
            this.btnExcluirCorrida.setEnabled(true);
        }
    }

    private void desabilitarComponentesAdm() {
        if (estadoTela == 0) {
            this.btnAddVeiculo.setEnabled(false);
            this.btnExcluirVeiculo.setEnabled(false);
            this.btnEditarVeiculo.setEnabled(false);
            this.btnAddMotorista.setEnabled(false);
            this.btnEditarMotorista.setEnabled(false);
            this.btnExcluirMotorista.setEnabled(false);
            this.btnAddNovoUsuario.setEnabled(false);
            this.btnEditarUsuario.setEnabled(false);
            this.btnExcluirUsuario.setEnabled(false);
            this.btnExcluirCorrida.setEnabled(false);
        }
    }

    public void carregarTabelaDeVeiculos() throws SQLException {
        VeiculoBO veiculoBO = new VeiculoBO();
        this.veiculos = veiculoBO.buscarVeiculos();
        ModeloTabelaVeiculos modelo = new ModeloTabelaVeiculos();
        tabelaVeiculos.setModel(modelo);
    }

    public void carregarTabelaDeMotorista() throws SQLException {
        this.motoristaBO = new MotoristaBO();
        this.motoristas = motoristaBO.buscarMotoristas();
        ModeloTabelaMotoriastas modelo = new ModeloTabelaMotoriastas();
        tabelaMotoristas.setModel(modelo);
    }

    public void carregarTabelaDeUsuarios() throws SQLException {
        this.usuarioBO = new UsuarioBO();
        this.usuarios = this.usuarioBO.buscarUsuarios();
        ModeloTabelaUsuarios modelo = new ModeloTabelaUsuarios();
        tabelaUsuario.setModel(modelo);
    }

    public void carregarTabelaDeCorridas() throws SQLException {
        CorridaBO corridaBO = new CorridaBO();
        this.corridas = corridaBO.buscarCorridas();
        ModeloTabelaCorridas modelo = new ModeloTabelaCorridas();
        tabelaCorridas.setModel(modelo);
    }

    private void deletarVeiculo(Veiculo veiculoQueSeraDeletado) {
        try {
            VeiculoBO veiculoBO = new VeiculoBO();
            veiculoBO.deletarVeiculo(veiculoQueSeraDeletado);
            this.carregarTabelaDeVeiculos();
            JOptionPane.showMessageDialog(this, "Veículo foi excluído!", "Excluir veículo", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException s) {

        }
    }

    private void deletarMotorista(Motorista motoristaQueSeraDeletado) {
        try {
            this.motoristaBO = new MotoristaBO();
            motoristaBO.deletarMotorista(motoristaQueSeraDeletado);
            this.carregarTabelaDeMotorista();
            JOptionPane.showMessageDialog(this, "Motorista foi excluído!", "Excluir motorista", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException s) {

        }
    }

    private void deletarUsuario(Usuario usuarioSelecionado) {
        try {
            this.usuarioBO = new UsuarioBO();
            this.usuarioBO.deletarUsuario(usuarioSelecionado);
            this.carregarTabelaDeUsuarios();
            JOptionPane.showMessageDialog(this, "Usuário foi excluído!", "Excluir usuário", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException s) {

        }
    }

    private void deletarCorrida(Corrida corridaSelecionado) throws SQLException {
        try {
            CorridaBO corridaBO = new CorridaBO();
            MotoristaFazCorridaBO motoristaFazCorridaBO = new MotoristaFazCorridaBO();
            motoristaFazCorridaBO.deletar(corridaSelecionado.getIdcorrida());
            corridaBO.deletarCorrida(corridaSelecionado);
            JOptionPane.showMessageDialog(this, "Corrida foi excluída!", "Excluir corrida", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException s) {

        }
    }
//
//    private void carregarTabelaVeiculosDisponiveis() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//    }

    private void gerarRelatorioTotalDeCorridasPorMotoristas() throws SQLException, JRException {
        RelatorioBO relatorioBO = new RelatorioBO();
        List<Relatorio> listaTotalCorridas = relatorioBO.totalCorridaPorMotorista();
        try {
            String arquivoRelatorio = System.getProperty("user.dir")
                    + "/relatorios/TotalDeCorridasPorMotoristas.jasper";

            Map<String, Object> parametros = new HashMap<String, Object>();

            JRBeanCollectionDataSource fonteDados = new JRBeanCollectionDataSource(listaTotalCorridas);

            JasperPrint relatorioGerado = JasperFillManager.fillReport(arquivoRelatorio, parametros, fonteDados);

            JasperViewer telaExibicaoRelatorio = new JasperViewer(relatorioGerado, false);
            telaExibicaoRelatorio.setTitle("Relatorio Total de corridas realizadas por motoristas");
            telaExibicaoRelatorio.setVisible(true);
        } catch (JRException ex) {
            //JOptionPane.showMessageDialog(this, "Erro ao exibir relatório.","Erro",JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void gerarRelatorioTotalDeCorridasVeiculos() throws SQLException {
        RelatorioBO relatorioBO = new RelatorioBO();
        List<Relatorio> listaTotalCorridaVeiculos = relatorioBO.totalCorridaVeiculos();
        try {
            String arquivoRelatorio = System.getProperty("user.dir")
                    + "/relatorios/TotalDeCorridasVeiculos.jasper";

            Map<String, Object> parametros = new HashMap<String, Object>();

            JRBeanCollectionDataSource fonteDados = new JRBeanCollectionDataSource(listaTotalCorridaVeiculos);

            JasperPrint relatorioGerado = JasperFillManager.fillReport(arquivoRelatorio, parametros, fonteDados);

            JasperViewer telaExibicaoRelatorio = new JasperViewer(relatorioGerado, false);
            telaExibicaoRelatorio.setTitle("Relatorio Total de corridas realizadas por veiculos");
            telaExibicaoRelatorio.setVisible(true);
        } catch (JRException ex) {
            //JOptionPane.showMessageDialog(this, "Erro ao exibir relatório.","Erro",JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //classe interna ModeloTabelaVeiculos
    private class ModeloTabelaVeiculos extends AbstractTableModel {

        @Override
        public String getColumnName(int coluna) {
            if (coluna == 0) {
                return "Placa";
            } else if (coluna == 1) {
                return "Modelo";
            } else if (coluna == 2) {
                return "Marca";
            } else {
                return "Habilitação";
            }
        }

        @Override
        public int getRowCount() {
            return veiculos.size();
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Veiculo v = veiculos.get(rowIndex);
            if (columnIndex == 0) {
                return v.getPlaca();
            } else if (columnIndex == 1) {
                return v.getModelo();
            } else if (columnIndex == 2) {
                return v.getMarca();
            } else {
                List<Habilitacao> habilitacoes = new ArrayList<>();
                HabilitacaoBO habilitacaoBO = new HabilitacaoBO();
                try {
                    habilitacoes = habilitacaoBO.buscarHabilitacoes();
                } catch (SQLException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (Habilitacao h : habilitacoes) {
                    if (v.getTipoHabilitacao() == h.getId()) {
                        return h.getNome();
                    }
                }
            }
            return null;
        }

    }

//classe interna ModeloTabelaMotoriastas
    private class ModeloTabelaMotoriastas extends AbstractTableModel {

        @Override
        public String getColumnName(int coluna) {
            if (coluna == 0) {
                return "Nome";
            } else {
                return "Habiltação";
            }
        }

        @Override
        public int getRowCount() {
            return motoristas.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Motorista m = motoristas.get(rowIndex);
            if (columnIndex == 0) {
                return m.getNome();
            } else {
                try {
                    HabilitacaoBO habilitacaoBO = new HabilitacaoBO();
                    List<Habilitacao> habilitacoes = new ArrayList<>();
                    habilitacoes = habilitacaoBO.buscarHabilitacoes();
                    for (Habilitacao h : habilitacoes) {
                        if (h.getId() == m.getTipoHabilitacao()) {
                            return h.getNome();
                        }
                    }
                    //return m.getTipoHabilitacao();
                } catch (SQLException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            return null;
        }
    }

    //classe interna ModeloTabelaUsuarios
    private class ModeloTabelaUsuarios extends AbstractTableModel {

        @Override
        public String getColumnName(int coluna) {
            if (coluna == 0) {
                return "Login";
            } else {
                return "Tipo";
            }
        }

        @Override
        public int getRowCount() {
            return usuarios.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Usuario u = usuarios.get(rowIndex);
            if (columnIndex == 0) {
                return u.getLogin();
            } else if (u.getTipo() == 1) {
                return "Administrador";
            } else {
                return "Atendente";
            }
        }

    }

//classe interna ModeloTabelaUsuarios
    private class ModeloTabelaCorridas extends AbstractTableModel {

        @Override
        public String getColumnName(int coluna) {
            if (coluna == 0) {
                return "Destino";
            } else if (coluna == 1) {
                return "Saída\nData-Hora";
            } else if (coluna == 2) {
                return "Previsão de Chegada";
            } else if (coluna == 3) {
                return "Status";
            } else if (coluna == 4) {
                return "DistânciaKm";
            } else if (coluna == 5) {
                return "Veículo(placa)";
            } else {
                return "Veículo(modelo)";
            }
        }

        @Override
        public int getRowCount() {
            return corridas.size();
        }

        @Override
        public int getColumnCount() {
            return 7;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Corrida c = corridas.get(rowIndex);
            if (columnIndex == 0) {
                return c.getDestino();
            } else if (columnIndex == 1) {
                return c.getDataSaida();
            } else if (columnIndex == 2) {
                return c.getPrevisaoCheagada();
            } else if (columnIndex == 3) {
                if (c.getDataChegada() != null) {
                    return "Encerrada";
                } else {
                    return "Em trânsito";
                }
            } else if (columnIndex == 4) {
                return c.getQuilometragem();
            } else if (columnIndex == 5) {
                for (Veiculo v : veiculos) {
                    if (c.getIdVeiculo() == v.getId()) {
                        return v.getPlaca();
                    }
                }
            } else {
                for (Veiculo v : veiculos) {
                    if (c.getIdVeiculo() == v.getId()) {
                        return v.getModelo();
                    }
                }
            }
            return null;
        }
    }

}
