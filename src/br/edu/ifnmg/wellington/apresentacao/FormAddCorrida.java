/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.ifnmg.wellington.apresentacao;

import br.edu.ifnmg.wellington.entidade.Corrida;
import br.edu.ifnmg.wellington.entidade.Motorista;
import br.edu.ifnmg.wellington.entidade.MotoristaFazCorrida;
import br.edu.ifnmg.wellington.entidade.Veiculo;
import br.edu.ifnmg.wellington.exception.CampoObrigatorioException;
import br.edu.ifnmg.wellington.exception.CorridaCorridaSemMotoristas;
import br.edu.ifnmg.wellington.exception.MotoristaEstaEmOutraCorrida;
import br.edu.ifnmg.wellington.exception.MotoristaNaoPodeDigirVeiculoException;
import br.edu.ifnmg.wellington.exception.VerificarVeiculoDuplicado;
import br.edu.ifnmg.wellington.exception.VerificarVeiculoEmCorrida;
import br.edu.ifnmg.wellington.negocio.CorridaBO;
import br.edu.ifnmg.wellington.negocio.MotoristaBO;
import br.edu.ifnmg.wellington.negocio.MotoristaFazCorridaBO;
import br.edu.ifnmg.wellington.negocio.VeiculoBO;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Were
 */
public class FormAddCorrida extends javax.swing.JFrame {

    /**
     * Creates new form FormAddCorrida
     */
    private List<Motorista> motoristas;
    private List<Veiculo> veiculos;
    private List<Corrida> corridas;
    //private List<MotoristaFazCorrida> MotoristaEstaEmCorrida;
    private Corrida corridaEmEdicao;
    private CorridaBO corridaBO;
    private MotoristaFazCorrida motoristaParaNovaCorrida;
    private Home home;
    int flagAtualizarCorrda = 0;
    int flagVerificarSeFoiAdionadoMotorista = 0;
    String item = "";
    String itemCbxCorrida = "";
    String itemCbxMotorista = "";

    public FormAddCorrida(Home telaHome) throws SQLException {
        initComponents();
        this.home = telaHome;
        this.carregarComboVeiculos();
        this.carregarComboCorrida();
        this.carregarComboMotoristas();
    }

    FormAddCorrida(Corrida corridaSelecionada, Home telaHome, int i) throws SQLException {
        initComponents();
        this.flagAtualizarCorrda = i;
        this.corridaEmEdicao = corridaSelecionada;
        this.home = telaHome;
        this.carregarComboVeiculos();
        this.carregarComboCorrida();
        this.carregarComboMotoristas();
        this.preencherCamposTela(corridaEmEdicao);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFormAddCorrida = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtDestinoCorrida = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDataSaida = new javax.swing.JFormattedTextField();
        txtPrevisaoChegada = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDataChegada = new javax.swing.JFormattedTextField();
        txtQuilometragem = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cbxVeiculo = new javax.swing.JComboBox<String>();
        addCorrida = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        cbxMotorista = new javax.swing.JComboBox<String>();
        btnAddMotoristaAcorrida = new javax.swing.JButton();
        lblCorrida = new javax.swing.JLabel();
        cbxCorrida = new javax.swing.JComboBox<String>();
        btnConcluir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Adicionar Corrida");
        setResizable(false);

        pnlFormAddCorrida.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Corrida", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jLabel1.setText("Destino:");

        jLabel2.setText("Data Saida:");
        jLabel2.setEnabled(false);

        try {
            txtDataSaida.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####-##:##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDataSaida.setEnabled(false);

        try {
            txtPrevisaoChegada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####-##:##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel3.setText("Previs√£oChegada:");

        jLabel4.setText("DataChegada:");

        try {
            txtDataChegada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####-##:##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        txtQuilometragem.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jLabel5.setText("Quilometragem:");

        jLabel7.setText("Veiculo");

        cbxVeiculo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        addCorrida.setText("Salvar");
        addCorrida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCorridaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFormAddCorridaLayout = new javax.swing.GroupLayout(pnlFormAddCorrida);
        pnlFormAddCorrida.setLayout(pnlFormAddCorridaLayout);
        pnlFormAddCorridaLayout.setHorizontalGroup(
            pnlFormAddCorridaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormAddCorridaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFormAddCorridaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(pnlFormAddCorridaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFormAddCorridaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addCorrida))
                    .addGroup(pnlFormAddCorridaLayout.createSequentialGroup()
                        .addGroup(pnlFormAddCorridaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFormAddCorridaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtQuilometragem, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtDataChegada, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtPrevisaoChegada, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtDataSaida, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                                .addComponent(txtDestinoCorrida, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(cbxVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlFormAddCorridaLayout.setVerticalGroup(
            pnlFormAddCorridaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormAddCorridaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFormAddCorridaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDestinoCorrida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormAddCorridaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQuilometragem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormAddCorridaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtDataSaida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormAddCorridaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrevisaoChegada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormAddCorridaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtDataChegada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormAddCorridaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(addCorrida))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Motoristas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jLabel6.setText("Motorista:");

        cbxMotorista.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAddMotoristaAcorrida.setText("Adicionar Motorista √† esta corrida");
        btnAddMotoristaAcorrida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMotoristaAcorridaActionPerformed(evt);
            }
        });

        lblCorrida.setText("Corrida para:");

        cbxCorrida.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(lblCorrida)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxCorrida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addComponent(btnAddMotoristaAcorrida)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCorrida)
                    .addComponent(cbxCorrida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddMotoristaAcorrida))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        btnConcluir.setText("Finalizar");
        btnConcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlFormAddCorrida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnConcluir)
                        .addGap(16, 16, 16)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlFormAddCorrida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(btnConcluir)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addCorridaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCorridaActionPerformed
        if (flagAtualizarCorrda != 1) {
            try {
                this.incluirCorrida();
                this.flagVerificarSeFoiAdionadoMotorista = 1;
            } catch (ParseException ex) {
                Logger.getLogger(FormAddCorrida.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(FormAddCorrida.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(FormAddCorrida.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                this.atualizarCorrida();
                this.flagVerificarSeFoiAdionadoMotorista = 1;
            } catch (ParseException ex) {
                Logger.getLogger(FormAddCorrida.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(FormAddCorrida.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(FormAddCorrida.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.flagAtualizarCorrda = 0;
        }
    }//GEN-LAST:event_addCorridaActionPerformed

    private void btnConcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConcluirActionPerformed
        try {
            if (this.corridaEmEdicao == null) {
                this.dispose();
            }
            if (this.home != null) {
                this.home.carregarTabelaDeCorridas();
            }
            this.verificarSeJaAdicionouMoutoristaParaNovaCorrida();
            this.dispose();
        } catch (CorridaCorridaSemMotoristas ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Nova corrida", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(FormAddCorrida.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnConcluirActionPerformed

    private void btnAddMotoristaAcorridaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMotoristaAcorridaActionPerformed
        try {
            this.incluirMotoristaEmUmaCorrida();
            this.flagVerificarSeFoiAdionadoMotorista = 0;
        } catch (SQLException ex) {
            Logger.getLogger(FormAddCorrida.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAddMotoristaAcorridaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCorrida;
    private javax.swing.JButton btnAddMotoristaAcorrida;
    private javax.swing.JButton btnConcluir;
    private javax.swing.JComboBox<String> cbxCorrida;
    private javax.swing.JComboBox<String> cbxMotorista;
    private javax.swing.JComboBox<String> cbxVeiculo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCorrida;
    private javax.swing.JPanel pnlFormAddCorrida;
    private javax.swing.JFormattedTextField txtDataChegada;
    private javax.swing.JFormattedTextField txtDataSaida;
    private javax.swing.JTextField txtDestinoCorrida;
    private javax.swing.JFormattedTextField txtPrevisaoChegada;
    private javax.swing.JFormattedTextField txtQuilometragem;
    // End of variables declaration//GEN-END:variables

    private void carregarComboMotoristas() throws SQLException {
        this.motoristas = new ArrayList<>();
        MotoristaBO motoristaBO = new MotoristaBO();
        this.motoristas = motoristaBO.buscarMotoristas();
        this.cbxMotorista.removeAllItems();
        this.cbxMotorista.addItem("--");
        for (Motorista m : motoristas) {
            this.cbxMotorista.addItem(m.getNome());
        }
    }

    private void carregarComboVeiculos() throws SQLException {
        this.veiculos = new ArrayList<>();
        VeiculoBO veiculoBO = new VeiculoBO();
        this.veiculos = veiculoBO.buscarVeiculos();
        this.cbxVeiculo.removeAllItems();
        this.cbxVeiculo.addItem("--");
        for (Veiculo v : veiculos) {
            this.cbxVeiculo.addItem(v.getPlaca());
        }
    }

    private void incluirCorrida() throws ParseException, SQLException, Exception {
        try {
            this.corridaBO = new CorridaBO();
            this.getItemComboHabiliatacao(cbxVeiculo.getSelectedItem().toString());
            this.recuperarCamposCorrida();
            this.corridaBO.incluirCorrida(this.corridaEmEdicao);
            this.carregarComboCorrida();
            this.carregarComboMotoristas();
            JOptionPane.showMessageDialog(this, "Cadastrado com sucesso!", "Nova corrida", JOptionPane.INFORMATION_MESSAGE);
        } catch (CampoObrigatorioException c) {
            String mensagen = "Por favor, Preencha todos os campos!\n" + c.getMessage();
            JOptionPane.showMessageDialog(this, mensagen, "Nova corrida", JOptionPane.ERROR_MESSAGE);
        } catch (VerificarVeiculoEmCorrida v) {
            JOptionPane.showMessageDialog(this, v.getMessage(), "Nova corrida", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void atualizarCorrida() throws ParseException, SQLException, Exception {
        try {
            this.corridaBO = new CorridaBO();
            this.recuperarCamposCorrida();
            this.corridaBO.atualizarCorrida(corridaEmEdicao);
            JOptionPane.showMessageDialog(this, "Alterado com sucesso!", "Atualizar corrida", JOptionPane.INFORMATION_MESSAGE);
            this.limparCamposTela();
        } catch (CampoObrigatorioException c) {
            JOptionPane.showMessageDialog(this, c.getMessage(), "Atualizar corrida", JOptionPane.INFORMATION_MESSAGE);
        }
//        catch (RuntimeException r) {
//            JOptionPane.showMessageDialog(this, "algum campo est√° vazio", "Atualizar corrida", JOptionPane.INFORMATION_MESSAGE);
//        }

    }

    private void getItemComboHabiliatacao(String toString) {
        this.item = toString;
    }

    private void getItemComboCorrida(String toString) {
        this.itemCbxCorrida = toString;
    }

    private void getItemComboMotorista(String toString) {
        this.itemCbxMotorista = toString;
    }

    private void recuperarCamposCorrida() throws ParseException {
        if (this.corridaEmEdicao == null) {
            this.corridaEmEdicao = new Corrida();
        }

        if (txtDestinoCorrida.getText().equals("")) {
            throw new CampoObrigatorioException("Campo DESTINO vazio!");
        } else {
            this.corridaEmEdicao.setDestino(txtDestinoCorrida.getText());
        }

        if (txtQuilometragem.getText().equals("")) {
            throw new CampoObrigatorioException("Campo QUILOMETRAGEM vazio!");
        } else {
            this.corridaEmEdicao.setQuilometragem(Integer.parseInt(txtQuilometragem.getText()));
        }

        if (txtPrevisaoChegada.getText().equals("  /  /    -  :  :  ")) {
            throw new CampoObrigatorioException("Campo PREVISAO CHEGADA vazio!");
        } else {
            this.corridaEmEdicao.setPrevisaoCheagada(this.txtPrevisaoChegada.getText());
        }

        if (txtDataChegada.getText().equals("  /  /    -  :  :  ") && flagAtualizarCorrda == 1) {
            throw new CampoObrigatorioException("Campo DATA CHEGADA vazio!");
        } else {
            this.corridaEmEdicao.setDataChegada(this.txtDataChegada.getText());
        }

        if (cbxVeiculo.getSelectedItem().equals("")) {
            throw new CampoObrigatorioException("Selecione a placa do ve√≠culo");
        } else {
            int posicaoSelecionada = 0;
            for (Veiculo v : veiculos) {
                if (v.getPlaca().equals(item)) {
                    posicaoSelecionada = v.getId();
                    this.corridaEmEdicao.setIdVeiculo(posicaoSelecionada);
                }
            }
        }
    }

    private void carregarComboCorrida() throws SQLException {
        this.corridas = new ArrayList<>();
        this.corridaBO = new CorridaBO();
        this.corridas = corridaBO.buscarCorridas();
        this.cbxCorrida.removeAllItems();
        this.cbxCorrida.addItem("--");
        for (Corrida c : this.corridas) {
            this.cbxCorrida.addItem(c.getDestino());
        }
    }

    private void incluirMotoristaEmUmaCorrida() throws SQLException {
        try {
            this.getItemComboCorrida(cbxCorrida.getSelectedItem().toString());
            this.getItemComboMotorista(cbxMotorista.getSelectedItem().toString());
            this.recuperaDadosCorridaEmMotorista();
            MotoristaFazCorridaBO motoristaFazCorridaBO = new MotoristaFazCorridaBO();
            // motoristaFazCorridaBO.verificarMotoristaEmOutrasCorridas(this.motoristaParaNovaCorrida);            
            motoristaFazCorridaBO.definirDadosCorrida(this.motoristaParaNovaCorrida, this.corridas, this.veiculos, this.motoristas);
            JOptionPane.showMessageDialog(this, "Salvo com sucesso!", "Corrida", JOptionPane.INFORMATION_MESSAGE);
            this.limparCamposTela();
            this.dispose();
        } catch (MotoristaNaoPodeDigirVeiculoException m) {
            JOptionPane.showMessageDialog(this, m.getMessage(), "Nova corrida", JOptionPane.ERROR_MESSAGE);
        } catch (MotoristaEstaEmOutraCorrida m) {
            JOptionPane.showMessageDialog(this, m.getMessage(), "Nova corrida", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void recuperaDadosCorridaEmMotorista() {
        if (this.motoristaParaNovaCorrida == null) {
            this.motoristaParaNovaCorrida = new MotoristaFazCorrida();
        }

        if (cbxCorrida.getSelectedItem().equals("")) {
            throw new CampoObrigatorioException("Selecione O destino!");
        } else {
            //int posicaoSelecionada = 0;
            for (Corrida c : this.corridas) {
                if (c.getDestino().equals(itemCbxCorrida)) {
                    //  posicaoSelecionada = m.getId();
                    this.motoristaParaNovaCorrida.setIdCorrida(c.getIdcorrida());
                }
            }
        }

        if (cbxMotorista.getSelectedItem().equals("")) {
            throw new CampoObrigatorioException("Selecione O Motorista!");
        } else {
            // int posicaoSelecionada = 0;
            for (Motorista m : this.motoristas) {
                if (m.getNome().equals(itemCbxMotorista)) {
                    // posicaoSelecionada = m.getId();
                    this.motoristaParaNovaCorrida.setIdMotorista(m.getId());
                }
            }
        }
    }

    private void preencherCamposTela(Corrida corridaEmEdicao) throws SQLException {
        this.txtDestinoCorrida.setText(corridaEmEdicao.getDestino());
        this.txtQuilometragem.setText(Integer.toString(corridaEmEdicao.getQuilometragem()));
        this.txtPrevisaoChegada.setText(corridaEmEdicao.getPrevisaoCheagada());
        this.txtDataSaida.setText(corridaEmEdicao.getDataSaida());
        for (Veiculo v : veiculos) {
            if (v.getId() == corridaEmEdicao.getIdVeiculo()) {
                this.cbxVeiculo.setSelectedItem(v.getPlaca());
            }
        }
    }

    private void limparCamposTela() {
        this.txtDestinoCorrida.setText("");
        this.txtQuilometragem.setText("");
        this.txtPrevisaoChegada.setText("");
        this.txtDataSaida.setText("");
        this.txtDataChegada.setText("");
        this.cbxVeiculo.setSelectedItem("--");

    }

    private void verificarSeJaAdicionouMoutoristaParaNovaCorrida() throws SQLException {
        if (this.flagVerificarSeFoiAdionadoMotorista == 1) {
            throw new CorridaCorridaSemMotoristas("Ainda n√£o foi adicionado  motorista a esta corrida!");
        }
    }
}
